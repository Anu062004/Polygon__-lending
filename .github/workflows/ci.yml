name: Credo Protocol Integration CI/CD

on:
  push:
    branches: [ main, develop, feature/credo-integration ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Compile contracts
      run: npm run compile
      
    - name: Run tests
      run: npm test
      
    - name: Run test coverage
      run: npm run test:coverage
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Slither
      run: |
        pip3 install slither-analyzer
        pip3 install solc-select
        solc-select install 0.8.21
        solc-select use 0.8.21
        
    - name: Run Slither analysis
      run: |
        slither contracts/ --exclude-dependencies --exclude-informational --exclude-optimization
      continue-on-error: true
      
    - name: Run npm audit
      run: npm audit --audit-level moderate
      continue-on-error: true

  deploy-testnet:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Compile contracts
      run: npm run compile
      
    - name: Deploy to Polygon Amoy
      env:
        POLYGON_AMOY_RPC_URL: ${{ secrets.POLYGON_AMOY_RPC_URL }}
        POLYGON_AMOY_DEPLOYER_KEY: ${{ secrets.POLYGON_AMOY_DEPLOYER_KEY }}
        POLYGONSCAN_API_KEY: ${{ secrets.POLYGONSCAN_API_KEY }}
      run: npm run deploy:amoy
      
    - name: Sync addresses
      run: npm run sync:addresses
      
    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v3
      with:
        name: deployment-artifacts
        path: |
          deployments/
          deploy-config/
          app/src/generated/

  frontend-build:
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install root dependencies
      run: npm ci
      
    - name: Install frontend dependencies
      run: |
        cd app
        npm ci
        
    - name: Build frontend
      run: |
        cd app
        npm run build
        
    - name: Upload frontend build
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: app/dist/

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run Solidity linting
      run: |
        npm install -g solhint
        solhint "contracts/**/*.sol"
      continue-on-error: true
      
    - name: Run JavaScript linting
      run: |
        cd app
        npm ci
        npm run lint
      continue-on-error: true

  gas-report:
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Generate gas report
      run: npm run gas:report
      
    - name: Upload gas report
      uses: actions/upload-artifact@v3
      with:
        name: gas-report
        path: gas-report.txt

  integration-test:
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Start local Hardhat node
      run: |
        npm run node &
        sleep 10
        
    - name: Deploy to local network
      run: npm run deploy:local
      
    - name: Run integration tests
      run: npm test -- --grep "Integration Tests"
      
    - name: Test frontend integration
      run: |
        cd app
        npm ci
        npm run build
        npm run preview &
        sleep 5
        curl -f http://localhost:4173 || exit 1

  notify:
    runs-on: ubuntu-latest
    needs: [test, security, deploy-testnet, frontend-build, lint, gas-report, integration-test]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.security.result == 'success' }}
      run: |
        echo "✅ All tests passed! Credo Protocol integration is ready."
        
    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.security.result == 'failure' }}
      run: |
        echo "❌ Tests failed. Please check the logs."
        exit 1
